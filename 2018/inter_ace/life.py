"""Python implementation of Conway's Game of Life

Somewhat inspired by Jack Diederich's talk `Stop Writing Classes`
http://pyvideo.org/video/880/stop-writing-classes

Ironically, as I extended the functionality of this module it seems obvious
that the next step would be to refactor board into a class with advance and
constrain as methods and print_board as __str__.
"""

import sys
import time


GLIDER = {
(0, 20),
(0, 21),
(0, 24),
(0, 25),
(0, 28),
(0, 29),
(0, 32),
(0, 33),
(0, 36),
(0, 37),
(0, 40),
(0, 41),
(1, 17),
(1, 44),
(4, 17),
(4, 44),
(5, 13),
(5, 15),
(5, 17),
(5, 18),
(5, 29),
(5, 32),
(5, 43),
(5, 44),
(5, 46),
(5, 48),
(6, 16),
(6, 17),
(6, 44),
(6, 45),
(7, 15),
(7, 18),
(7, 27),
(7, 34),
(7, 43),
(7, 46),
(8, 12),
(8, 16),
(8, 28),
(8, 29),
(8, 32),
(8, 33),
(8, 45),
(8, 49),
(9, 11),
(9, 16),
(9, 17),
(9, 20),
(9, 22),
(9, 27),
(9, 34),
(9, 37),
(9, 39),
(9, 40),
(9, 42),
(9, 44),
(9, 45),
(9, 50),
(10, 13),
(10, 20),
(10, 24),
(10, 34),
(10, 35),
(10, 41),
(10, 43),
(10, 48),
(11, 9),
(11, 11),
(11, 15),
(11, 16),
(11, 18),
(11, 23),
(11, 24),
(11, 25),
(11, 27),
(11, 29),
(11, 30),
(11, 31),
(11, 32),
(11, 36),
(11, 38),
(11, 42),
(11, 45),
(11, 46),
(11, 50),
(11, 52),
(12, 8),
(12, 13),
(12, 14),
(12, 16),
(12, 23),
(12, 27),
(12, 33),
(12, 34),
(12, 38),
(12, 45),
(12, 47),
(12, 48),
(12, 53),
(13, 5),
(13, 10),
(13, 12),
(13, 18),
(13, 19),
(13, 21),
(13, 22),
(13, 25),
(13, 26),
(13, 27),
(13, 28),
(13, 32),
(13, 33),
(13, 34),
(13, 37),
(13, 39),
(13, 40),
(13, 42),
(13, 43),
(13, 49),
(13, 51),
(13, 56),
(14, 12),
(14, 14),
(14, 18),
(14, 20),
(14, 21),
(14, 24),
(14, 25),
(14, 31),
(14, 32),
(14, 33),
(14, 38),
(14, 39),
(14, 41),
(14, 47),
(14, 49),
(15, 5),
(15, 7),
(15, 11),
(15, 18),
(15, 21),
(15, 22),
(15, 26),
(15, 28),
(15, 29),
(15, 31),
(15, 33),
(15, 35),
(15, 37),
(15, 38),
(15, 40),
(15, 41),
(15, 50),
(15, 54),
(15, 56),
(16, 6),
(16, 8),
(16, 9),
(16, 11),
(16, 12),
(16, 17),
(16, 20),
(16, 21),
(16, 22),
(16, 23),
(16, 25),
(16, 26),
(16, 27),
(16, 28),
(16, 33),
(16, 34),
(16, 35),
(16, 36),
(16, 37),
(16, 38),
(16, 39),
(16, 40),
(16, 41),
(16, 42),
(16, 43),
(16, 44),
(16, 49),
(16, 50),
(16, 52),
(16, 53),
(16, 55),
(17, 1),
(17, 4),
(17, 5),
(17, 6),
(17, 9),
(17, 15),
(17, 16),
(17, 17),
(17, 18),
(17, 20),
(17, 25),
(17, 29),
(17, 31),
(17, 32),
(17, 43),
(17, 44),
(17, 45),
(17, 46),
(17, 52),
(17, 55),
(17, 56),
(17, 57),
(17, 60),
(18, 5),
(18, 7),
(18, 11),
(18, 13),
(18, 20),
(18, 22),
(18, 23),
(18, 24),
(18, 27),
(18, 28),
(18, 31),
(18, 34),
(18, 38),
(18, 41),
(18, 43),
(18, 44),
(18, 45),
(18, 48),
(18, 49),
(18, 50),
(18, 54),
(18, 56),
(19, 13),
(19, 14),
(19, 21),
(19, 22),
(19, 24),
(19, 25),
(19, 29),
(19, 30),
(19, 37),
(19, 40),
(19, 41),
(19, 43),
(19, 48),
(20, 0),
(20, 9),
(20, 10),
(20, 12),
(20, 13),
(20, 15),
(20, 17),
(20, 22),
(20, 24),
(20, 25),
(20, 32),
(20, 33),
(20, 35),
(20, 37),
(20, 38),
(20, 41),
(20, 45),
(20, 46),
(20, 47),
(20, 48),
(20, 49),
(20, 51),
(20, 52),
(20, 61),
(21, 0),
(21, 14),
(21, 20),
(21, 22),
(21, 24),
(21, 33),
(21, 36),
(21, 37),
(21, 43),
(21, 45),
(21, 46),
(21, 49),
(21, 61),
(22, 9),
(22, 11),
(22, 15),
(22, 16),
(22, 18),
(22, 19),
(22, 21),
(22, 22),
(22, 24),
(22, 25),
(22, 28),
(22, 30),
(22, 31),
(22, 32),
(22, 33),
(22, 36),
(22, 37),
(22, 38),
(22, 42),
(22, 43),
(22, 44),
(22, 45),
(22, 47),
(22, 50),
(22, 52),
(23, 13),
(23, 15),
(23, 18),
(23, 19),
(23, 21),
(23, 25),
(23, 26),
(23, 28),
(23, 29),
(23, 30),
(23, 31),
(23, 33),
(23, 34),
(23, 36),
(23, 42),
(23, 45),
(23, 47),
(23, 48),
(24, 1),
(24, 4),
(24, 5),
(24, 12),
(24, 13),
(24, 15),
(24, 16),
(24, 20),
(24, 22),
(24, 25),
(24, 27),
(24, 29),
(24, 30),
(24, 31),
(24, 32),
(24, 33),
(24, 36),
(24, 37),
(24, 38),
(24, 39),
(24, 41),
(24, 42),
(24, 45),
(24, 50),
(24, 61),
(25, 8),
(25, 11),
(25, 13),
(25, 14),
(25, 15),
(25, 18),
(25, 23),
(25, 26),
(25, 28),
(25, 29),
(25, 30),
(25, 31),
(25, 33),
(25, 34),
(25, 35),
(25, 37),
(25, 39),
(25, 46),
(25, 49),
(25, 61),
(26, 9),
(26, 10),
(26, 13),
(26, 14),
(26, 15),
(26, 16),
(26, 21),
(26, 25),
(26, 27),
(26, 28),
(26, 29),
(26, 30),
(26, 31),
(26, 32),
(26, 33),
(26, 34),
(26, 35),
(26, 37),
(26, 39),
(26, 42),
(26, 46),
(26, 47),
(26, 49),
(27, 14),
(27, 15),
(27, 16),
(27, 20),
(27, 21),
(27, 22),
(27, 24),
(27, 25),
(27, 28),
(27, 30),
(27, 34),
(27, 35),
(27, 36),
(27, 37),
(27, 39),
(27, 40),
(27, 41),
(27, 42),
(27, 47),
(27, 48),
(27, 50),
(28, 9),
(28, 10),
(28, 13),
(28, 17),
(28, 19),
(28, 20),
(28, 21),
(28, 25),
(28, 27),
(28, 28),
(28, 29),
(28, 31),
(28, 32),
(28, 36),
(28, 37),
(28, 38),
(28, 41),
(28, 43),
(28, 44),
(28, 46),
(28, 47),
(28, 48),
(28, 49),
(28, 51),
(28, 52),
(28, 53),
(28, 56),
(28, 57),
(28, 60),
(29, 10),
(29, 11),
(29, 13),
(29, 14),
(29, 15),
(29, 16),
(29, 17),
(29, 23),
(29, 27),
(29, 31),
(29, 34),
(29, 38),
(29, 39),
(29, 40),
(29, 44),
(29, 51),
(30, 8),
(30, 10),
(30, 12),
(30, 13),
(30, 17),
(30, 19),
(30, 20),
(30, 22),
(30, 23),
(30, 24),
(30, 26),
(30, 27),
(30, 28),
(30, 31),
(30, 32),
(30, 34),
(30, 35),
(30, 36),
(30, 38),
(30, 39),
(30, 40),
(30, 41),
(30, 42),
(30, 45),
(30, 46),
(30, 47),
(31, 10),
(31, 11),
(31, 13),
(31, 15),
(31, 22),
(31, 23),
(31, 24),
(31, 25),
(31, 27),
(31, 29),
(31, 30),
(31, 31),
(31, 33),
(31, 34),
(31, 35),
(31, 36),
(31, 40),
(31, 41),
(31, 45),
(31, 48),
(31, 50),
(32, 12),
(32, 14),
(32, 15),
(32, 18),
(32, 19),
(32, 21),
(32, 22),
(32, 24),
(32, 25),
(32, 28),
(32, 30),
(32, 31),
(32, 32),
(32, 33),
(32, 34),
(32, 38),
(32, 39),
(32, 40),
(32, 42),
(32, 44),
(32, 46),
(32, 50),
(33, 12),
(33, 13),
(33, 14),
(33, 16),
(33, 19),
(33, 21),
(33, 25),
(33, 26),
(33, 28),
(33, 30),
(33, 32),
(33, 35),
(33, 36),
(33, 37),
(33, 40),
(33, 44),
(33, 46),
(33, 47),
(33, 48),
(34, 9),
(34, 11),
(34, 12),
(34, 15),
(34, 17),
(34, 21),
(34, 24),
(34, 27),
(34, 30),
(34, 31),
(34, 33),
(34, 35),
(34, 36),
(34, 37),
(34, 39),
(34, 40),
(34, 42),
(34, 44),
(34, 46),
(34, 48),
(34, 50),
(34, 51),
(35, 18),
(35, 19),
(35, 24),
(35, 26),
(35, 28),
(35, 29),
(35, 35),
(35, 38),
(35, 44),
(35, 49),
(35, 53),
(35, 54),
(35, 56),
(36, 12),
(36, 13),
(36, 15),
(36, 17),
(36, 18),
(36, 19),
(36, 21),
(36, 25),
(36, 26),
(36, 28),
(36, 29),
(36, 30),
(36, 33),
(36, 34),
(36, 35),
(36, 37),
(36, 39),
(36, 40),
(36, 41),
(36, 46),
(36, 47),
(36, 50),
(36, 53),
(37, 11),
(37, 12),
(37, 13),
(37, 19),
(37, 20),
(37, 22),
(37, 23),
(37, 24),
(37, 25),
(37, 29),
(37, 30),
(37, 31),
(37, 33),
(37, 35),
(37, 37),
(37, 38),
(37, 42),
(37, 43),
(37, 45),
(37, 53),
(38, 14),
(38, 22),
(38, 23),
(38, 25),
(38, 28),
(38, 30),
(38, 32),
(38, 33),
(38, 36),
(38, 38),
(38, 39),
(38, 44),
(38, 45),
(38, 47),
(38, 54),
(38, 56),
(39, 9),
(39, 11),
(39, 14),
(39, 15),
(39, 16),
(39, 18),
(39, 20),
(39, 22),
(39, 24),
(39, 28),
(39, 29),
(39, 31),
(39, 32),
(39, 33),
(39, 34),
(39, 35),
(39, 37),
(39, 38),
(39, 39),
(39, 40),
(39, 42),
(39, 43),
(39, 45),
(39, 47),
(39, 48),
(39, 49),
(39, 51),
(39, 52),
(39, 53),
(40, 8),
(40, 13),
(40, 14),
(40, 16),
(40, 19),
(40, 26),
(40, 28),
(40, 29),
(40, 33),
(40, 34),
(40, 35),
(40, 37),
(40, 38),
(40, 39),
(40, 41),
(40, 42),
(40, 47),
(40, 50),
(40, 52),
(41, 5),
(41, 10),
(41, 12),
(41, 20),
(41, 21),
(41, 22),
(41, 24),
(41, 26),
(41, 32),
(41, 35),
(41, 38),
(41, 39),
(41, 40),
(41, 41),
(41, 42),
(41, 46),
(41, 47),
(41, 48),
(41, 49),
(41, 52),
(41, 53),
(42, 12),
(42, 17),
(42, 20),
(42, 23),
(42, 24),
(42, 27),
(42, 28),
(42, 29),
(42, 30),
(42, 32),
(42, 34),
(42, 37),
(42, 38),
(42, 39),
(42, 40),
(42, 44),
(42, 46),
(42, 50),
(42, 51),
(43, 5),
(43, 7),
(43, 11),
(43, 14),
(43, 15),
(43, 20),
(43, 23),
(43, 24),
(43, 25),
(43, 26),
(43, 27),
(43, 30),
(43, 34),
(43, 40),
(43, 41),
(43, 42),
(43, 43),
(43, 44),
(43, 45),
(43, 46),
(43, 50),
(44, 4),
(44, 5),
(44, 6),
(44, 9),
(44, 10),
(44, 13),
(44, 16),
(44, 17),
(44, 19),
(44, 24),
(44, 25),
(44, 27),
(44, 29),
(44, 31),
(44, 32),
(44, 33),
(44, 35),
(44, 40),
(44, 42),
(44, 44),
(44, 45),
(44, 46),
(44, 49),
(44, 50),
(45, 4),
(45, 5),
(45, 6),
(45, 9),
(45, 10),
(45, 13),
(45, 16),
(45, 17),
(45, 20),
(45, 23),
(45, 24),
(45, 26),
(45, 30),
(45, 31),
(45, 32),
(45, 37),
(45, 38),
(45, 39),
(45, 42),
(45, 43),
(45, 45),
(45, 46),
(45, 47),
(45, 48),
(45, 49),
(45, 51),
(45, 52),
(46, 5),
(46, 7),
(46, 11),
(46, 18),
(46, 22),
(46, 23),
(46, 26),
(46, 27),
(46, 34),
(46, 35),
(46, 37),
(46, 38),
(46, 42),
(46, 45),
(46, 46),
(46, 47),
(46, 49),
(46, 50),
(46, 52),
(46, 53),
(47, 12),
(47, 14),
(47, 18),
(47, 21),
(47, 22),
(47, 23),
(47, 25),
(47, 26),
(47, 27),
(47, 29),
(47, 31),
(47, 32),
(47, 33),
(47, 34),
(47, 38),
(47, 39),
(47, 40),
(47, 41),
(47, 44),
(47, 45),
(47, 46),
(47, 48),
(47, 52),
(47, 53),
(48, 5),
(48, 10),
(48, 12),
(48, 18),
(48, 19),
(48, 20),
(48, 28),
(48, 30),
(48, 39),
(48, 41),
(48, 42),
(48, 45),
(48, 51),
(49, 8),
(49, 13),
(49, 14),
(49, 16),
(49, 22),
(49, 28),
(49, 29),
(49, 34),
(49, 35),
(49, 36),
(49, 39),
(49, 40),
(49, 41),
(49, 43),
(49, 45),
(49, 46),
(49, 47),
(49, 48),
(49, 50),
(49, 51),
(50, 9),
(50, 11),
(50, 15),
(50, 16),
(50, 24),
(50, 29),
(50, 31),
(50, 32),
(50, 42),
(50, 44),
(50, 49),
(51, 13),
(51, 18),
(51, 19),
(51, 20),
(51, 24),
(51, 26),
(51, 28),
(51, 33),
(51, 35),
(51, 37),
(51, 39),
(51, 42),
(52, 11),
(52, 16),
(52, 17),
(52, 22),
(52, 27),
(52, 43),
(52, 47),
(52, 50),
(53, 12),
(53, 16),
(53, 20),
(53, 21),
(53, 24),
(53, 25),
(53, 30),
(53, 37),
(53, 38),
(53, 39),
(54, 15),
(54, 18),
(54, 36),
(54, 38),
(54, 42),
(55, 16),
(55, 17),
(55, 30),
(55, 31),
(56, 13),
(56, 15),
(56, 17),
(56, 18),
(56, 28),
(56, 31),
(56, 33),
(56, 34),
(56, 40),
(57, 17),
(57, 25),
(57, 36),
(57, 37),
(60, 17),
(60, 24),
(61, 20),
(61, 21),
}


def neighbors(cell, distance=1):
    """Return the neighbors of cell."""
    x, y = cell
    r = xrange(0 - distance, 1 + distance)
    return ((x + i, y + j) # new cell offset from center
            for i in r for j in r # iterate over range in 2d
            if not i == j == 0) # exclude the center cell


def advance(board):
    """Advance the board one step and return it."""
    new_board = set()
    for cell in board:
        cell_neighbors = set(neighbors(cell))
        # test if live cell dies
        if len(board & cell_neighbors) in [2, 3]:
            new_board.add(cell)
        # test dead neighbors to see if alive
        for n in cell_neighbors:
            if len(board & set(neighbors(n))) is 3:
                new_board.add(n)
    return new_board


def print_board(board, size=None):
    sizex = sizey = size or 0
    for x, y in board:
        sizex = x if x > sizex else sizex
        sizey = y if y > sizey else sizey
    for i in xrange(sizex + 1):
        for j in xrange(sizey + 1):
            sys.stdout.write(' x ' if (i, j) in board else '   ')
        print


def constrain(board, size):
    return set(cell for cell in board if cell[0] <= size and cell[1] <= size)


def main(board, steps=10000, size=64):
    for i in xrange(1, steps + 1):
        sys.stdout.write('\033[H')  # move to the top
        sys.stdout.write('\033[J')  # clear the screen
        print 'step:', i, '/', steps
        print_board(board, size)
        time.sleep(1)
        board = constrain(advance(board), size)


if __name__ == '__main__':
    main(GLIDER)
